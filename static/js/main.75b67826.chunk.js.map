{"version":3,"sources":["components/Card.js","components/Board.js","App.js","index.js"],"names":["Card","props","index","image","clickedCard","className","color","onClick","text","src","alt","Board","images","randomImages","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","map","App","useState","curScore","setScore","bestScore","setBestScore","lastCard","setLastCard","useEffect","id","console","log","bContainsIndex","some","x","values","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NASeA,MATf,SAAcC,GAC4BA,EAA9BC,MAAR,IAAeC,EAAuBF,EAAvBE,MAAOC,EAAgBH,EAAhBG,YACtB,OACI,qBAAKC,UAAW,QAAUF,EAAMG,MAAOC,QAAS,kBAAMH,EAAYD,EAAMK,OAAxE,SACI,qBAAKC,IAAI,GAAGC,IAAKP,EAAMK,UC6BpBG,MA/Bf,SAAeV,GACX,IAAKW,EAAuBX,EAAvBW,OAAQR,EAAeH,EAAfG,YACTS,EAAY,YAAQD,GAExB,OASJ,SAAiBE,GACb,IAAkCC,EAA9BC,EAAeF,EAAMG,OAGzB,KAAO,IAAMD,GAAc,CAGzBD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GACzCA,IAJyB,MAOmB,CAC1CF,EAAMC,GAAcD,EAAME,IAD3BF,EAAME,GAPkB,KAOHF,EAAMC,GAPH,MAd3BM,CAAQR,GACD,qBAAKR,UAAU,QAAf,SAEHQ,EAAaS,KAAI,SAACnB,EAAOD,GACvB,OAAO,cAAC,EAAD,CAAkBA,MAAOA,EAAQ,EAAGC,MAAOA,EAAOC,YAAaA,GAApDF,SCLtBU,EAAS,CACb,CAACJ,KAAM,MAAOF,MAAO,OAAQ,CAACE,KAAM,MAAOF,MAAO,OAAQ,CAACE,KAAM,SAAUF,MAAO,OAClF,CAACE,KAAM,QAASF,MAAO,SAAU,CAACE,KAAM,SAAUF,MAAO,SAAU,CAACE,KAAM,OAAQF,MAAO,SACzF,CAACE,KAAM,MAAOF,MAAO,QAAS,CAACE,KAAM,MAAOF,MAAO,QAAS,CAACE,KAAM,QAASF,MAAO,QACnF,CAACE,KAAM,MAAOF,MAAO,UAAW,CAACE,KAAM,OAAQF,MAAO,UAAW,CAACE,KAAM,QAASF,MAAO,WAuC3EiB,MApCf,WACE,MAA2BC,mBAAS,GAApC,mBAAKC,EAAL,KAAeC,EAAf,KACA,EAAgCF,mBAAS,GAAzC,mBAAKG,EAAL,KAAgBC,EAAhB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAKK,EAAL,KAAeC,EAAf,KAoBA,OAlBAC,qBAAU,WACLN,EAAWE,GACZC,EAAaH,KACd,CAACA,EAAUE,IAgBZ,sBAAKtB,UAAU,MAAf,UACE,6CACA,qFACA,sBAAK2B,GAAG,QAAR,UACE,iDAAoBP,KACpB,8CAAiBE,QAEnB,cAAC,EAAD,CAAOf,OAAQA,EAAQR,YArBP,SAACF,GACnB+B,QAAQC,IAAI,gBAAkBhC,GAC9B,IAAMiC,EAAiBN,EAASO,MAAK,SAACC,GAAD,OAAOA,IAAMnC,KAC9CiC,EAIIA,IACNT,EAAS,GACTI,EAAY,MALZJ,EAASD,EAAW,GACpBK,GAAY,SAACQ,GAAD,4BAAiBA,GAAjB,CAAyBpC,eCtB3CqC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.75b67826.chunk.js","sourcesContent":["function Card(props) {\n    const { index, image, clickedCard } = props;\n    return (\n        <div className={\"card \" + image.color} onClick={() => clickedCard(image.text)}>\n            <img src=\"\" alt={image.text}/>\n        </div>\n    );\n}\n\nexport default Card;","import Card from \"./Card\";\n\nfunction Board(props) {\n    let {images, clickedCard} = props;\n    let randomImages = [ ...images];\n    shuffle(randomImages);\n    return <div className=\"board\" >\n    {\n        randomImages.map((image, index) => {\n          return <Card key={index} index={index + 1} image={image} clickedCard={clickedCard}/>\n        })\n    }\n    </div>\n}\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n\nexport default Board;","import React, {useEffect, useState} from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\n\nconst images = [\n  {text: 'cat', color: 'red'}, {text: 'dog', color: 'red'}, {text: 'rabbit', color: 'red'},\n  {text: 'apple', color: 'green'}, {text: 'orange', color: 'green'}, {text: 'pear', color: 'green'},\n  {text: 'one', color: 'blue'}, {text: 'two', color: 'blue'}, {text: 'three', color: 'blue'},\n  {text: 'red', color: 'purple'}, {text: 'blue', color: 'purple'}, {text: 'green', color: 'purple'},\n];\n\nfunction App() {\n  let [curScore, setScore] = useState(0);\n  let [bestScore, setBestScore] = useState(0);\n  let [lastCard, setLastCard] = useState([]);\n\n  useEffect(() => {\n    if(curScore > bestScore)\n      setBestScore(curScore);\n  }, [curScore, bestScore]);\n\n  const clickedCard = (index) => {\n    console.log(\"clicked card \" + index);\n    const bContainsIndex = lastCard.some((x) => x === index);\n    if(!bContainsIndex) {\n      setScore(curScore + 1);\n      setLastCard((values) => [ ...values, index]);\n    }\n    else if(bContainsIndex) {\n      setScore(0);\n      setLastCard([]);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <h2>Get points by clicking on images you haven't before</h2>\n      <div id='score'>\n        <h3>Current Score: {curScore}</h3>\n        <h3>Best Score: {bestScore}</h3>\n      </div>\n      <Board images={images} clickedCard={clickedCard}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}